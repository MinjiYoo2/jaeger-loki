apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: example-hotrod
  name: example-hotrod
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: example-hotrod
  strategy: {}
  template:
    metadata:
      labels:
        app: example-hotrod
    spec:
      containers:
      - image: jaegertracing/example-hotrod:latest
        name: example-hotrod
        args: ["all"]
        env:
          - name: JAEGER_AGENT_HOST
            value: "jaeger-agent.monitoring.svc"
          - name: JAEGER_AGENT_PORT
            value: "6831"
        ports:
          - containerPort: 8080
            name: frontend
          - containerPort: 8081
            name: customer
          - containerPort: 8083
            name: route
        resources:
          limits:
            cpu: 100m
            memory: 100M
          requests:
            cpu: 100m
            memory: 100M
---
apiVersion: v1
kind: Service
metadata:
  name: example-hotrod
  namespace: monitoring
spec:
  selector:
    app: example-hotrod
  #type: NodePort
  type: LoadBalancer
  ports:
    - name: frontend
      protocol: TCP
      port: 8080
      targetPort: frontend
      #nodePort: 31500
---
# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     app: jaeger
#     app.kubernetes.io/component: service-agent
#     app.kubernetes.io/instance: jaeger
#     app.kubernetes.io/managed-by: jaeger-operator
#     app.kubernetes.io/name: jaeger-agent
#     app.kubernetes.io/part-of: jaeger
#   name: jaeger-agent
#   namespace: monitoring
# spec:
#   ports:
#   - name: agent-host
#     port: 6831
#     protocol: UDP
#     targetPort: 6831
#   selector:
#     app: jaeger
#     app.kubernetes.io/component: agent
#     app.kubernetes.io/instance: jaeger
#     app.kubernetes.io/managed-by: jaeger-operator
#     app.kubernetes.io/name: jaeger-agent
#     app.kubernetes.io/part-of: jaeger
#   sessionAffinity: None
#   type: ClusterIP
